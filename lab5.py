
import numpy as np
from itertools import combinations
import random as rnd
import math

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–∏—Å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
def get_basis_order(n, m):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ n-1 –≤ –¥–≤–æ–∏—á–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
    ans = []
    for i in range(n):
        binary = f'{i:b}'[::-1]  # –ü–µ—Ä–µ–≤–æ–¥ –≤ –¥–≤–æ–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç
        if len(binary) < m:
            binary += '0' * (m - len(binary))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –Ω—É–ª–µ–π
        ans.append(binary)
    return ans

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤
def get_vectors_order(r, m):
    elements = list(range(m))
    ans = []
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª–∏–Ω–æ–π –æ—Ç 0 –¥–æ r –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
    for i in range(r + 1):
        combinations_list = sorted(list(combinations(elements, i)), reverse=True)
        for combination in combinations_list:
            ans.append(list(combination))
    return ans

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–∂–¥–∞—é—â–µ–π –º–∞—Ç—Ä–∏—Ü—ã –∫–æ–¥–∞ –†–∏–¥–∞-–ú–∞–ª–ª–µ—Ä–∞
def get_rm_G_matr(r, m):
    n = 2 ** m  # –î–ª–∏–Ω–∞ –∫–æ–¥–∞
    basis_order = get_basis_order(n, m)  # –ë–∞–∑–∏—Å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    vectors_order = get_vectors_order(r, m)  # –ü–æ—Ä—è–¥–æ–∫ –≤–µ–∫—Ç–æ—Ä–æ–≤
    g_matr = np.zeros((len(vectors_order), n), dtype=int)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
    for i in range(g_matr.shape[0]):
        for j in range(g_matr.shape[1]):
            flag = True
            for indx in vectors_order[i]:
                if basis_order[j][indx] == '1':
                    g_matr[i][j] = 0
                    flag = False
                    break
            if flag:
                g_matr[i][j] = 1

    print("–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –≤—ã–≤–æ–¥: –ø–æ—Ä–æ–∂–¥–∞—é—â–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∫–æ–¥–∞ –†–∏–¥–∞-–ú–∞–ª–ª–µ—Ä–∞")
    print(g_matr)
    print("–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –≤—ã–≤–æ–¥: –±–∞–∑–∏—Å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫")
    print(basis_order)
    print("–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –≤—ã–≤–æ–¥: –ø–æ—Ä—è–¥–æ–∫ –≤–µ–∫—Ç–æ—Ä–æ–≤")
    print(vectors_order)

    return g_matr, basis_order, vectors_order

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞
def get_complement(m, I):
    Zm = list(range(m))
    return [i for i in Zm if i not in I]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ Hj
def get_Hj(g_matr, basis_order, vectors_order, Jc, m):
    Hj = []
    J = list(Jc)
    if J == list(range(m)):
        str_var = vectors_order.index([])
    else:
        str_var = vectors_order.index(J)
    for i in range(len(g_matr[str_var])):
        if g_matr[str_var][i] == 1:
            Hj.append(basis_order[i])
    return Hj

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞ V
def get_V(Jc, basis_order, hj):
    v = []
    for pos in basis_order:
        flag = True
        for j in Jc:
            if pos[j] != hj[j]:
                v.append(0)
                flag = False
                break
        if flag:
            v.append(1)
    return v

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞–∂–æ—Ä–∏—Ç–∞—Ä–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
def get_Mj(W, m, basis_order, r, g_matr, vectors_order):
    M = {}
    for I in range(r, -1, -1):
        if I == r:
            w = W
        else:
            for key in sorted(M):
                if len(key) == I + 1 and M[key] == 1:
                    _w = w
                    w = []
                    v = g_matr[vectors_order.index(list(key))]
                    for e in range(len(_w)):
                        w.append((_w[e] + v[e]) % 2)
                    break
        J = sorted(list(combinations(range(m), I)))
        for j in J:
            Jc = get_complement(m, j)
            Hj = get_Hj(g_matr, basis_order, vectors_order, j, m)
            count1 = 0
            count0 = 0
            for hj in Hj:
                V = get_V(Jc, basis_order, hj)

                temp = []
                s = 0
                for k in range(len(V)):
                    temp.append((V[k] or w[k]))
                    s += temp[-1] if temp[-1] == 1 else 0
                if Jc == list(range(m)):
                    M[j] = 0
                    break
                if ((s + 1) % 2) == 1:
                    count1 += 1
                else:
                    count0 += 1

                if count1 > 2 ** (m - I - 1):
                    M[j] = 1
                    break
                elif count0 > 2 ** (m - I - 1):
                    M[j] = 0
                    break
    return M

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
def get_err_word(g_matr, r, basis_order, vectors_order, t):
    m = int(math.log2(g_matr.shape[1]))
    row = g_matr.shape[0]

    idx = rnd.randint(0, row - 1)
    word = np.array(g_matr[idx][:row])
    w = np.dot(word, g_matr) % 2
    print(f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {word}")
    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {w}")
    for i in range(t):
        w[i] += 1
        w[i] %= 2
    print(f"–ü—Ä–∏–Ω—è—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π: {w}")
    M = get_Mj(w, m, basis_order, r, g_matr, vectors_order)
    u = []
    for i, j in M.items():
        u.append(j)
    u = u[::-1]
    print(f"–ò–∑–º–µ–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {u}")
    try:
        print(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {np.dot(u, g_matr) % 2}")
    except:
        print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –†–∏–¥–∞-–ú–∞–ª–ª–µ—Ä–∞
r, m = 2, 4
rm_g_matr, basis_order, vectors_order = get_rm_G_matr(r, m)
t_list = [1, 2]

for t in t_list:
    print(f"[1m–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –†–∏–¥–∞-–ú–∞–ª–ª–µ—Ä–∞ RM({r}, {m}) –ø—Ä–∏ t = {t}[0m")
    get_err_word(rm_g_matr, r, basis_order, vectors_order, t)
    if t != t_list[-1]:
        print("")
